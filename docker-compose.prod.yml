# docker-compose.prod.yml
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: servicesync-postgres-prod
    env_file:
      - .env.prod
    environment:
      # Use hardcoded values to avoid variable substitution issues
      POSTGRES_DB: servicesync_prod
      POSTGRES_USER: servicesync_prod
      # POSTGRES_PASSWORD will be set from DB_PASSWORD in .env.prod via env_file
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - servicesync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U servicesync_prod -d servicesync_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: servicesync-redis-prod
    env_file:
      - .env.prod
    # Redis will use REDIS_PASSWORD from env_file automatically
    command: ["sh", "-c", "redis-server --requirepass $$REDIS_PASSWORD"]
    volumes:
      - redis_data:/data
    networks:
      - servicesync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli --no-auth-warning -a $$REDIS_PASSWORD ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: servicesync-app-prod
    env_file:
      - .env.prod
    environment:
      # Override or set specific values needed by the application
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: servicesync_prod
      DB_USERNAME: servicesync_prod
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TZ: Africa/Johannesburg
      JAVA_OPTS: "-Xms512m -Xmx1g -XX:+UseG1GC"
      # All other values (DB_PASSWORD, JWT_SECRET, etc.) come from .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - servicesync-network
    volumes:
      - app_uploads:/var/servicesync/uploads
      - app_logs:/var/log/servicesync
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: servicesync-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - servicesync-network
    restart: unless-stopped

networks:
  servicesync-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local